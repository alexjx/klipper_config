
[gcode_macro G29]
gcode:
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
variable_verbose_enable: 1                  # Set to True to enable KAMP information output when running. This is useful for debugging.
variable_mesh_margin: 0                     # Expands the mesh size in millimeters if desired. Leave at 0 to disable.
rename_existing: _BED_MESH_CALIBRATE
gcode:
    # check if we have tool mounted, we could not do that
    {% if printer['toollock'].tool_current | int >= 0 %}
        { action_raise_error('could not probe if there is a tool mounted') }
    {% endif %}
    CHECK_TOOL state="unmounted"

    {% if "xyz" != printer.toolhead.homed_axes %}
        { action_raise_error('not enough axis homed') }
    {% endif %}

    {% set use_kamp = printer["gcode_macro _SETTINGS"].use_kamp | int %}

    {% if use_kamp %}

        # Adaptive Meshing
        # following code is taken from https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging/blob/main/Configuration/Adaptive_Meshing.cfg
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}                            # Gather all object points
        {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                                                      # Get bed mesh min from printer.cfg
        {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                                                      # Get bed mesh max from printer.cfg
        {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}                                                    # Get probe count from printer.cfg
        {% set verbose_enable = verbose_enable | abs %}                                                                             # Pull verbose setting from _KAMP_Settings
        {% set mesh_margin = mesh_margin | float %}                                                                                 # Pull mesh margin setting from _KAMP_Settings
        {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}                                         # If probe count is only a single number, convert it to 2. E.g. probe_count:7 = 7,7
        {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}                        # Determine max probe point distance
        {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}                        # Determine max probe point distance
        {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}                                            # Set x_min from smallest object x point
        {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}                                            # Set y_min from smallest object y point
        {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}                                            # Set x_max from largest object x point
        {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}                                            # Set y_max from largest object y point

        {% set adapted_x_min = (bed_mesh_min[0] - mesh_margin, x_min) | max %}                                                      # Adapt x_min to margin and fuzz constraints
        {% set adapted_y_min = (bed_mesh_min[1] - mesh_margin, y_min) | max %}                                                      # Adapt y_min to margin and fuzz constraints
        {% set adapted_x_max = (bed_mesh_max[0] + mesh_margin, x_max) | min %}                                                      # Adapt x_max to margin and fuzz constraints
        {% set adapted_y_max = (bed_mesh_max[1] + mesh_margin, y_max) | min %}                                                      # Adapt y_max to margin and fuzz constraints

        {% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}                                                           # Compare adjustments to defaults and choose max
        {% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}                                                           # Compare adjustments to defaults and choose max
        {% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}                                                           # Compare adjustments to defaults and choose min
        {% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}                                                           # Compare adjustments to defaults and choose min

        {% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}      # Define probe_count's x point count and round up
        {% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}      # Define probe_count's y point count and round up

        {% if (([points_x, points_y]|max) > 6) %}                                                                                   #
            {% set algorithm = "bicubic" %}                                                                                         #
            {% set min_points = 4 %}                                                                                                #
        {% else %}                                                                                                                  # Calculate if algorithm should be bicubic or lagrange
            {% set algorithm = "lagrange" %}                                                                                        #
            {% set min_points = 3 %}                                                                                                #
        {% endif %}                                                                                                                 #

        {% set points_x = [points_x , min_points]|max %}                                                                            # Set probe_count's x points to fit the calculated algorithm
        {% set points_y = [points_y , min_points]|max %}                                                                            # Set probe_count's y points to fit the calculated algorithm
        {% set points_x = [points_x , probe_count[0]]|min %}
        {% set points_y = [points_y , probe_count[1]]|min %}

        {% if verbose_enable | abs %}                                                                                             # If verbose is enabled, print information about KAMP's calculations
            { action_respond_info( "Algorithm: {}.".format(
                (algorithm),
            )) }
            { action_respond_info("Default probe count: {},{}.".format(
                (probe_count[0]),
                (probe_count[1]),
            )) }
            { action_respond_info("Adapted probe count: {},{}.".format(
                (points_x),
                (points_y),
            )) }
            {action_respond_info("Default mesh bounds: {}, {}.".format(
                (bed_mesh_min[0],bed_mesh_min[1]),
                (bed_mesh_max[0],bed_mesh_max[1]),
            )) }
            {% if mesh_margin > 0 %}
                {action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
                    (mesh_margin),
                    (mesh_margin),
                )) }
            {% else %}
                {action_respond_info("Mesh margin is 0, margin not increased.")}
            {% endif %}
            { action_respond_info("Adapted mesh bounds: {}, {}.".format(
                (adapted_x_min, adapted_y_min),
                (adapted_x_max, adapted_y_max),
            )) }
            {action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
        {% endif %}

        _BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}

    {% else %}

        _BED_MESH_CALIBRATE

    {% endif %}


[gcode_macro MANUAL_BED_CALIBRATE]
gcode:
    # check if we have tool mounted, we could not do that
    {% if printer['toollock'].tool_current | int >= 0 %}
        { action_raise_error('could not probe if there is a tool mounted') }
    {% endif %}
    CHECK_TOOL state="unmounted"

    _CG28

    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% set algorithm = printer.configfile.settings.bed_mesh.algorithm %}

    BED_MESH_CLEAR
    _BED_MESH_CALIBRATE mesh_min={bed_mesh_min[0]},{bed_mesh_min[1]} mesh_max={bed_mesh_max[0]},{bed_mesh_max[1]} ALGORITHM=lagrange PROBE_COUNT=3,3


[gcode_macro MANUAL_PROBE_1]
gcode:
    G0 F30000
    G0 Z7.0
    G0 X5 Y5
    PROBE_ACCURACY SAMPLES=10

[gcode_macro MANUAL_PROBE_2]
gcode:
    G0 F30000
    G0 Z7.0
    G0 X290 Y5
    PROBE_ACCURACY SAMPLES=10

[gcode_macro MANUAL_PROBE_3]
gcode:
    G0 F30000
    G0 Z7.0
    G0 X290 Y190
    PROBE_ACCURACY SAMPLES=10

[gcode_macro MANUAL_PROBE_4]
gcode:
    G0 F30000
    G0 Z7.0
    G0 X5 Y190
    PROBE_ACCURACY SAMPLES=10
