[gcode_macro PRINT_BEGIN]
description: Start print macro v2
gcode:
    # statistics
    KTCC_INIT_PRINT_STATS

    # home if needed
    _CG28

    # process param arrays
    {% if params.BED_TEMPS is not defined or params.BED_TEMPS == "" %}
        { action_raise_error("BED_TEMPS are not provided") }
    {% endif %}
    {% set bed_temps = params.BED_TEMPS.split(",") %}
    {% if params.TOOL_TEMPS is not defined or params.TOOL_TEMPS == "" %}
        { action_raise_error("TOOL_TEMPS are not provided") }
    {% endif %}
    {% set tool_temps = params.TOOL_TEMPS.split(",") %}
    {% if params.USED_TOOLS is defined %}
        {% set used_tools = params.USED_TOOLS.split(",") %}
    {% else %}
        {% set used_tools = ["true", "true", "true", "true"] %}
    {% endif %}
    {% if params.INITIAL_TOOL is defined %}
        {% set initial_tool = params.INITIAL_TOOL %}
    {% else %}
        {% set initial_tool = 0 %}
    {% endif %}

    # check if params array lens equals to 4
    {% if bed_temps | length != 4 %}
        { action_raise_error("BED_TEMPS must have 4 elements") }
    {% endif %}
    {% if tool_temps | length != 4 %}
        { action_raise_error("TOOL_TEMPS must have 4 elements") }
    {% endif %}
    {% if used_tools | length != 4 %}
        { action_raise_error("USED_TOOLS must have 4 elements") }
    {% endif %}

    # iterate params to set temps, bed will be the lowest, tools are independent
    # workaround jinja2 scope
    {% set params_block = { 'bed_temp': 0, 't0_temp': 0, 't1_temp': 0, 't2_temp': 0, 't3_temp': 0, 'used_count': 0, 'soak_time': params.HEAT_SOAK | default(0) | int } %}
    {% for i in range(0, 4) %}
        {% if used_tools[i] != "true" %}
            # check if inital tool is used
            {% if i == initial_tool %}
                { action_raise_error("Initial tool is not used") }
            {% endif %}
        {% else %}
            {% if params_block.bed_temp == 0 or params_block.bed_temp > bed_temps[i] | int %}
                # this looks strange but there is no other way to update a dict
                {% if params_block.update({'bed_temp': bed_temps[i] | int}) %}{% endif %}
            {% endif %}
            {% if i == 0 %}
                # this looks strange but there is no other way to update a dict
                {% if params_block.update({'t0_temp': tool_temps[i] | int}) %}{% endif %}
            {% elif i == 1 %}
                # this looks strange but there is no other way to update a dict
                {% if params_block.update({'t1_temp': tool_temps[i] | int}) %}{% endif %}
            {% elif i == 2 %}
                # this looks strange but there is no other way to update a dict
                {% if params_block.update({'t2_temp': tool_temps[i] | int}) %}{% endif %}
            {% elif i == 3 %}
                # this looks strange but there is no other way to update a dict
                {% if params_block.update({'t3_temp': tool_temps[i] | int}) %}{% endif %}
            {% endif %}
            # this looks strange but there is no other way to update a dict
            {% if params_block.update({'used_count': params_block.used_count + 1}) %}{% endif %}
        {% endif %}
    {% endfor %}

    # we need at least one greater than 0
    {% if params_block.used_count == 0 %}
        { action_raise_error("At least one extruder temperature must be provided") }
    {% endif %}

    # basic settings
    G21 # set units to millimeters
    G90 # absolute positioning
    M83 # extruder relative mode
    # reset speed factor
    M220 S100
    # reset extrusion factor
    M221 S100

    # first heat bed
    {% if params_block.bed_temp > 0 %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ params_block.bed_temp }
    {% endif %}

    # if we need to heat soak
    {% if params_block.soak_time > 0 and params_block.bed_temp > 110 %}
        M117 "heat soaking the chamber"
        # select initial tool
        T{ initial_tool }
        PARK_CENTER
        # turn on fan at 50%
        SET_AND_SAVE_FAN_SPEED S=0.5
        {% for i in range(0, params_block.soak_time) %}
            M117 Heat soak will complete in { params_block.soak_time - i } minutes
            # wait 1 min
            G4 P{ 60 * 1000 }
        {% endfor %}
        SET_AND_SAVE_FAN_SPEED S=0.0
        # drop tool here we want to wait nozzle to raise at the stash
        DROP_TOOL
    {% endif %}

    # heater used nozzles
    {% if params_block.t0_temp > 0 %}
        SET_TOOL_TEMPERATURE TOOL=0 ACTV_TMP={ params_block.t0_temp } STDB_TMP={ params_block.t0_temp } CHNG_STATE=2
    {% endif %}
    {% if params_block.t1_temp > 0 %}
        SET_TOOL_TEMPERATURE TOOL=1 ACTV_TMP={ params_block.t1_temp } STDB_TMP={ params_block.t1_temp } CHNG_STATE=2
    {% endif %}
    {% if params_block.t2_temp > 0 %}
        SET_TOOL_TEMPERATURE TOOL=2 ACTV_TMP={ params_block.t2_temp } STDB_TMP={ params_block.t2_temp } CHNG_STATE=2
    {% endif %}
    {% if params_block.t3_temp > 0 %}
        SET_TOOL_TEMPERATURE TOOL=3 ACTV_TMP={ params_block.t3_temp } STDB_TMP={ params_block.t3_temp } CHNG_STATE=2
    {% endif %}

    # wait heaters
    {% if params_block.bed_temp > 0 %}
        TEMPERATURE_WAIT_WITH_TOLERANCE HEATER=0 TOLERANCE=1
    {% endif %}
    {% if params_block.t0_temp > 0 %}
        TEMPERATURE_WAIT_WITH_TOLERANCE TOOL=0 TOLERANCE=3
    {% endif %}
    {% if params_block.t1_temp > 0 %}
        TEMPERATURE_WAIT_WITH_TOLERANCE TOOL=1 TOLERANCE=3
    {% endif %}
    {% if params_block.t2_temp > 0 %}
        TEMPERATURE_WAIT_WITH_TOLERANCE TOOL=2 TOLERANCE=3
    {% endif %}
    {% if params_block.t3_temp > 0 %}
        TEMPERATURE_WAIT_WITH_TOLERANCE TOOL=3 TOLERANCE=3
    {% endif %}

    # select initial tool
    T{ initial_tool }

    # prepare nozzle
    BED_MESH_PROFILE LOAD=default

    # prime the tool if there is only one
    {% if params_block.used_count == 1 %}
        PRIME_TOOL START_X=0 START_Y=0 LENGTH=40 FLOW_RATE=8.0 LINES=3
    {% endif %}


[gcode_macro PRINT_END]
description: finish print macro
gcode:
    # raise nozzle to avoid collision
    G91
    G0 X-3 Y-3 F30000
    G1 Z2 F3000
    G90
    DROP_TOOL
    TURN_OFF_HEATERS
    BED_MESH_CLEAR
    # disable steppers
    M84
    # dump print stats
    KTCC_DUMP_PRINT_STATS
    # set fan off
    UPDATE_DELAYED_GCODE ID=PRINTEND_FAN_OFF DURATION=10

[gcode_macro FAN_OFF]
description: Turn off all fan
gcode:
    SET_AND_SAVE_FAN_SPEED S=0 P=0
    SET_AND_SAVE_FAN_SPEED S=0 P=1
    SET_AND_SAVE_FAN_SPEED S=0 P=2
    SET_AND_SAVE_FAN_SPEED S=0 P=3

[delayed_gcode PRINTEND_FAN_OFF]
gcode:
    FAN_OFF

[gcode_macro EXTRUDER_OFF]
description: Turn off all extruder
gcode:
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder1 ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder2 ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder3 ENABLE=0
