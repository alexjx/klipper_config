[gcode_macro PRIME_TOOL]
description: Prime Nozzle
gcode:
    {% set prime_start_x = params.START_X|default(0)|float %}
    {% set prime_start_y = params.START_Y|default(0)|float %}
    {% set prime_length = params.LENGTH|default(40)|float %}
    {% set flow_rate = params.FLOW_RATE|default(8)|float %}

    # check if we have tool selected
    {% if printer.toollock.tool_current == -1 %}
        { action_raise_error("No tool selected") }
    {% endif %}

   # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
    {% endif %}

    # lower bed if it's not higher than 5mm
    {% if printer.gcode_move.position.z < 5 %}
        G0 Z5 F6000
    {% endif %}

    G90 # absolute positioning
    M83 # relative extrusion mode

    # go to prime position
    G0 X{ prime_start_x } Y{ prime_start_y } F30000
    G0 Z0.2

    # prime lines
    # assuming we are printing with a 0.4mm nozzle and a layer height of 0.2mm
    # we are priming with 0.8 width line so .8 * .2 = 0.16mm^2
    # the length is { prime_length }mm so the volume is { prime_length * 0.16 }mm^3
    # we want to achive the flow rate goal, then we will be extruding { flow_rate } mm^3/s
    # which translate to feedrate is { flow_rate } / 0.16
    G1 X{ prime_start_x + prime_length } E{ prime_length * 0.2 * 0.8 } F{ flow_rate * 60.0 / 0.2 / 0.8 }

    # move one line position, and prime a second line, with lower flow rate
    G1 Y{ prime_start_y + 0.6 } F{ 300 * 60 }
    G1 X{ prime_start_x } E{ prime_length * 0.8 * 0.2 * 0.6 } F{ flow_rate * 0.8 * 60.0 / 0.2 / 0.6 }

    # move one line position, and prime a third line, with lower flow rate
    G1 Y{ prime_start_y + 1.0 } F{ 300 * 60 }
    G1 X{ prime_start_x + prime_length } E{ prime_length * 0.6 * 0.2 * 0.4 } F{ flow_rate * 0.6 * 60.0 / 0.2 / 0.4 }
    G0 X{ prime_start_x + prime_length + 10 } F30000 # after prime, move 10mm to break string
    { RETRACT } # retract


#
# Adaptive Purge
# this is from: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging/blob/main/Configuration/Line_Purge.cfg
[gcode_macro ADAPTIVE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
variable_purge_margin: 10
variable_verbose_enable: 1
gcode:
    # Get relevant printer params
    {% set purge_length = params.LENGTH | default(40) | float %}
    {% set flow_rate = params.FLOW_RATE | default(8) | float %}
    {% set travel_speed = 400 * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}

    # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
    {% endif %}

    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_length / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_length / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis

    {% set purge_x_origin = purge_x_min - purge_margin - 2 %}                                           # Add margin to x min, compare to 0, and choose the larger
    {% set purge_y_origin = purge_y_min - purge_margin - 2 %}                                           # Add margin to y min, compare to 0, and choose the larger

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 0.16) * 60 | float %}
    {% set purge_extrude = purge_length * 0.2 * 0.8 %}

    # Santity check, if object has position less than 0, we will not purge
    {% if purge_x_origin < 0 and purge_y_origin < 0 %}
        { action_raise_error("Object is too large to purge.") }
    {% endif %}

    {% if verbose_enable == True %}
        {% if purge_y_origin > 0 %}
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
                (purge_x_center),
                (purge_y_origin),
                (purge_length),
                (flow_rate),
            )) }
        {% else %}
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
                (purge_x_origin),
                (purge_y_center),
                (purge_length),
                (flow_rate),
            )) }
        {% endif %}
    {% endif %}

    SAVE_GCODE_STATE NAME=Prepurge_State                                                            # Create gcode state

    G90                                                                                             # Absolute positioning
    M83                                                                                             # Relative extrusion mode

    {% if purge_y_origin > 0 %}                                                                     # If there's room on Y, purge along X axis in front of print area

        {% set purge_start_x = purge_x_center %}
        {% set purge_start_y = purge_y_origin %}

        G0 F{ travel_speed }                                                                        # Set travel speed
        G0 X{ purge_start_x} Y{ purge_start_y }                                                     # Move to purge position
        G0 Z0.2                                                                                     # Move to purge Z height

        G1 X{ purge_start_x + purge_length } E{ purge_extrude } F{ purge_move_speed }               # prime first line
        G1 Y{ purge_start_y + 0.6 } F{ travel_speed }                                               # move one line position
        G1 X{ purge_start_x } E{ purge_extrude * 0.8 } F{ purge_move_speed * 0.8 }                  # prime second line with lower flow rate
        G1 Y{ purge_start_y + 1.0 } F{ travel_speed }                                               # move one line position
        G1 X{ purge_start_x + purge_length } E{ purge_extrude * 0.6 } F{ purge_move_speed * 0.8 }   # prime third line with lower flow rate
        G0 X{ purge_start_x + purge_length + 10 } F30000                                            # after prime, move 10mm to break string

    {% else %}                                                                                      # If there's room on X, purge along Y axis to the left of print area

        {% set purge_start_x = purge_x_origin %}
        {% set purge_start_y = purge_y_center %}

        G0 F{ travel_speed }                                                                        # Set travel speed
        G0 X{ purge_start_x } Y{ purge_start_y }                                                    # Move to purge position
        G0 Z0.2                                                                                     # Move to purge Z height

        G1 Y{ purge_start_y + purge_length } E{ purge_extrude } F{ purge_move_speed }               # prime first line
        G1 X{ purge_start_x + 0.6 } F{ travel_speed }                                               # move one line position
        G1 Y{ purge_start_y } E{ purge_extrude * 0.8 } F{ purge_move_speed * 0.8 }                  # prime second line with lower flow rate
        G1 X{ purge_start_x + 1.0 } F{ travel_speed }                                               # move one line position
        G1 Y{ purge_start_y + purge_length } E{ purge_extrude * 0.6 } F{ purge_move_speed * 0.8 }   # prime third line with lower flow rate
        G0 Y{ purge_start_y + purge_length + 10 } F30000                                            # after prime, move 10mm to break string

    {% endif %}

    { RETRACT }                                                                                     # retract

    RESTORE_GCODE_STATE NAME=Prepurge_State                                                         # Restore gcode state
