[toolgroup 0]
# is_virtual: False
# physical_parent:
# meltzonelength: 18
# idle_to_standby_time: 30
# idle_to_powerdown_time: 600
# lazy_home_when_parking: 0
# requires_pickup_for_virtual_load: True
# requires_pickup_for_virtual_unload: True
# unload_virtual_at_dropoff: True
pickup_gcode:
    _TOOLCHANGE_PICKUP T={ myself.name }
dropoff_gcode:
    _TOOLCHANGE_DROPOFF T={ myself.name }
# virtual_toolload_gcode:
# virtual_toolunload_gcode:

[gcode_macro SAVE_MANUAL_OFFSET]
description: Save current position as manual offset
gcode:
    {% set current_tool = printer.toollock.current_tool | int %}
    {% if current_tool < 0 %}
        { action_raise_error("No tool selected") }
    {% endif %}
    {% set apply_global_offsets = printer["gcode_macro _SETTINGS"].apply_global_offsets | abs %}

    # get current offsets
    {% set current_offset_x = printer.gcode_move.homing_origin.x | float %}
    {% set current_offset_y = printer.gcode_move.homing_origin.y | float %}
    {% set current_offset_z = printer.gcode_move.homing_origin.z | float %}
    # calculate expected offsets
    {% set offsets = printer.save_variables.variables['tool_' ~ current_tool ~ '_offsets'] %}
    {% set x_offset = offsets[0] %}
    {% set y_offset = offsets[1] %}
    {% set z_offset = offsets[2] %}
    {% if apply_global_offsets > 0 %}
        {% set x_offset = x_offset + printer.toollock.global_offset[0] %}
        {% set y_offset = y_offset + printer.toollock.global_offset[1] %}
        {% set z_offset = z_offset + printer.toollock.global_offset[2] %}
    {% endif %}
    # check if we need to update offsets
    {% if x_offset != current_offset_x or y_offset != current_offset_y or z_offset != current_offset_z %}
        # revert global offset if required
        {% if apply_global_offsets %}
            {% set current_offset_x = x_offset - printer.toollock.global_offset[0] %}
            {% set current_offset_y = y_offset - printer.toollock.global_offset[1] %}
            {% set current_offset_z = z_offset - printer.toollock.global_offset[2] %}
        {% endif %}
        RESPOND MSG="update tool { current_tool } offsets to { '%.4f'|format(current_offset_x) }, { '%.4f'|format(current_offset_y) }, { '%.4f'|format(current_offset_z) }"
        SET_TOOL_OFFSET TOOL={ current_tool } X={ '%.4f' | format(current_offset_x) } Y={ '%.4f' | format(current_offset_y) } Z={ '%.4f' | format(current_offset_z) }
        KTCC_SAVE_TOOL_OFFSET TOOL={ current_tool }
    {% endif %}

[gcode_macro _TOOLCHANGE_DROPOFF]
description: Toolchange dropoff macro
gcode:
    {% set selected_tool_id = params.T %}
    {% set tool = printer['tool ' ~ selected_tool_id] %}
    {% set extruder = printer[tool.extruder] %}
    {% set remember_position = printer["gcode_macro _SETTINGS"].remember_position | int %}
    {% set save_tool_offsets = printer["gcode_macro _SETTINGS"].save_tool_offsets | abs %}
    {% set apply_global_offsets = printer["gcode_macro _SETTINGS"].apply_global_offsets | abs %}

    # update and save tool offsets
    {% if save_tool_offsets > 0 %}
        SAVE_MANUAL_OFFSET
    {% endif %}

    # save tool location
    {% if remember_position | int != 0 %}
        SAVE_CURRENT_POSITION RESTORE_POSITION_TYPE=2
    {% endif %}

    # reset offsets
    SET_GCODE_OFFSET X=0 Y=0 Z=0

    # retract filament
    {% if extruder.can_extrude %}
        SAVE_GCODE_STATE NAME=toolchange_dropoff
        G91
        M83
        G0 Z+1 F3000
        G1 E-{ tool.meltzonelength } F{ 80 * 60 }
        RESTORE_GCODE_STATE NAME=toolchange_dropoff
    {% endif %}

    # raise Z to avoid collision
    G91
    G0 Z+3 F3000
    G90

    # move to park position
    {% if tool.zone[1] | float > 150 %}
        G0 X{ tool.zone[0] } Y150 F30000
    {% endif %}
    G0 X{ tool.zone[0] } Y{ tool.zone[1] } F30000
    G0 Y{ tool.park[1] | float - 20.0 } F30000
    G0 Y{ tool.park[1] } F3000
    M400

    # unlock tool
    TOOL_UNLOCK

    # move out
    G0 Y170 F30000
    M400

[gcode_macro _TOOLCHANGE_PICKUP]
description: Toolchange pickup macro
gcode:
    {% set selected_tool_id = params.T %}
    {% set tool = printer['tool ' ~ selected_tool_id] %}
    {% set extruder = printer[tool.extruder] %}
    {% set offsets = printer.save_variables.variables['tool_' ~ selected_tool_id ~ '_offsets'] | default(tool.offset) %}
    {% set remember_position = printer["gcode_macro _SETTINGS"].remember_position | int %}
    {% set apply_global_offsets = printer["gcode_macro _SETTINGS"].apply_global_offsets | int %}
    {% set temperature_compensation = printer["gcode_macro _SETTINGS"].temperature_compensation | abs %}
    {% set compensation_coefficient = printer["gcode_macro _SETTINGS"].compensation_coeff | float %}

    # reset offset
    SET_GCODE_OFFSET X=0 Y=0 Z=0

    # raise Z to avoid collision
    G91
    G0 Z+7 F1200
    G90

    # ensure coupler is unlocked
    COUPLER_UNLOCK

    # move to pickup position
    {% if tool.zone[1] | float > 150 %}
        G0 X{ tool.zone[0] } Y170 F30000
    {% endif %}
    G0 X{ tool.zone[0] } Y{ tool.zone[1] } F30000
    G0 Y{ tool.park[1] | float - 20.0 } F30000
    G0 Y{ tool.park[1] } F3000
    M400

    # tool tool
    TOOL_LOCK

    # prime filament
    {% if extruder.can_extrude %}
        SAVE_GCODE_STATE NAME=toolchange_pickup
        M83
        G1 E{ tool.meltzonelength } F{ 40 * 60 }
        RESTORE_GCODE_STATE NAME=toolchange_pickup
    {% endif %}

    # move out
    G0 Y170 F30000
    M400

    # set offsets
    {% set x_offset = offsets[0] %}
    {% set y_offset = offsets[1] %}
    {% set z_offset = offsets[2] %}
    {% if apply_global_offsets | abs > 0 %}
        {% set x_offset = x_offset + printer.toollock.global_offset[0] %}
        {% set y_offset = y_offset + printer.toollock.global_offset[1] %}
        {% set z_offset = z_offset + printer.toollock.global_offset[2] %}
    {% endif %}
    # temperature compensation: 0.0006 mm / °C, starting from 25°C
    {% if temperature_compensation > 0 and compensation_coefficient > 0.0 and extruder.target | int > 25 %}
        {% set offset_by_temp = ((extruder.target | int - 25) | float) * compensation_coefficient %}
        RESPOND PREFIX="" MSG="Z Offset temperature compensation: { '%.6f'|format(offset_by_temp) } mm"
        {% set z_offset = z_offset + offset_by_temp %}
    {% endif %}
    SET_GCODE_OFFSET X={ x_offset } Y={ y_offset } Z={ z_offset }

    # restore position
    {% if remember_position and printer.toollock.saved_position %}
        RESTORE_POSITION
    {% endif %}
