[toolgroup 0]
# is_virtual: False
# physical_parent:
# meltzonelength: 18
idle_to_standby_time: 300
idle_to_powerdown_time: 600
# lazy_home_when_parking: 0
# requires_pickup_for_virtual_load: True
# requires_pickup_for_virtual_unload: True
# unload_virtual_at_dropoff: True
pickup_gcode:
    _TOOLCHANGE_PICKUP T={ myself.name }
dropoff_gcode:
    _TOOLCHANGE_DROPOFF T={ myself.name }
# virtual_toolload_gcode:
# virtual_toolunload_gcode:

[gcode_macro SAVE_MANUAL_OFFSET]
description: Save current position as manual offset
gcode:
    {% set tool_current = printer.toollock.tool_current %}
    {% set tool = printer['tool ' ~ tool_current] %}
    {% set current_tool = tool_current | int %}
    {% if current_tool >= 0 %}
        {% set apply_global_offsets = printer["gcode_macro _SETTINGS"].apply_global_offsets | abs %}
        {% set temperature_compensation = printer["gcode_macro _SETTINGS"].temperature_compensation | abs %}
        {% set compensation_coeffs = printer["gcode_macro _SETTINGS"].compensation_coeffs %}

        # get current offsets
        {% set current_offset_x = printer.gcode_move.homing_origin.x | float %}
        {% set current_offset_y = printer.gcode_move.homing_origin.y | float %}
        {% set current_offset_z = printer.gcode_move.homing_origin.z | float %}
        # calculate expected offsets
        {% set offsets = printer['tool ' ~ current_tool].offset %}
        {% set x_offset = offsets[0] %}
        {% set y_offset = offsets[1] %}
        {% set z_offset = offsets[2] %}

        # revert global offset
        {% if apply_global_offsets > 0 %}
            {% set x_offset = x_offset + printer.toollock.global_offset[0] %}
            {% set y_offset = y_offset + printer.toollock.global_offset[1] %}
            {% set z_offset = z_offset + printer.toollock.global_offset[2] %}
        {% endif %}

        # revert temperature compensation
        {% if temperature_compensation > 0 and tool.heater_active_temp | int > 25 %}
            {% set coefficient_l = compensation_coeffs[tool_current].low | float %}
            {% set coefficient_h = compensation_coeffs[tool_current].high | float %}
            {% if tool.heater_active_temp | int > 240 %}
                {% set coefficient = (coefficient_h - coefficient_l) * ((tool.heater_active_temp | int - 240) | float / 60.0) + coefficient_l %}
            {% else %}
                {% set coefficient = coefficient_l %}
            {% endif %}
            {% set offset_by_temp = ((tool.heater_active_temp | int - 25) | float) * coefficient %}
            {% set z_offset = z_offset + offset_by_temp %}
        {% endif %}

        # check if we need to update offsets
        {% if x_offset != current_offset_x or y_offset != current_offset_y or z_offset != current_offset_z %}
            # revert global offset if required
            {% if apply_global_offsets %}
                {% set current_offset_x = x_offset - printer.toollock.global_offset[0] %}
                {% set current_offset_y = y_offset - printer.toollock.global_offset[1] %}
                {% set current_offset_z = z_offset - printer.toollock.global_offset[2] %}
            {% endif %}
            RESPOND MSG="update tool { current_tool } z-offset from { '%.4f'|format(offsets[2]) } to { '%.4f'|format(current_offset_z) }"
            SET_TOOL_OFFSET TOOL={ current_tool } X={ '%.4f' | format(current_offset_x) } Y={ '%.4f' | format(current_offset_y) } Z={ '%.4f' | format(current_offset_z) }
            KTCC_SAVE_TOOL_OFFSET TOOL={ current_tool }
        {% endif %}
    {% endif %}

[gcode_macro _TOOLCHANGE_DROPOFF]
description: Toolchange dropoff macro
gcode:
    {% set selected_tool_id = params.T %}
    {% set tool = printer['tool ' ~ selected_tool_id] %}
    {% set extruder = printer[tool.extruder] %}
    {% set save_tool_offsets = printer["gcode_macro _SETTINGS"].save_tool_offsets | abs %}
    {% set apply_global_offsets = printer["gcode_macro _SETTINGS"].apply_global_offsets | abs %}
    {% set pressure_advance = extruder.pressure_advance %}

    # update and save tool offsets
    {% if save_tool_offsets > 0 %}
        SAVE_MANUAL_OFFSET
    {% endif %}

    # save tool location if we're printing
    {% if printer.print_stats.state|upper == "PRINTING" %}
        SAVE_CURRENT_POSITION RESTORE_POSITION_TYPE=2
    {% else %}
        SAVE_POSITION X=0 Y=0 Z=0 RESTORE_POSITION_TYPE=0 # clear saved position
    {% endif %}

    # reset offsets
    SET_GCODE_OFFSET X=0 Y=0 Z=0

    # retract filament
    {% if extruder.can_extrude %}
        SAVE_GCODE_STATE NAME=toolchange_dropoff
        G91
        M83
        # G0 Z+1 F3000  # this might cause stringing
        #SET_PRESSURE_ADVANCE_ORIG EXTRUDER={ tool.extruder } ADVANCE=0 # disable pressure advance
        G1 E-{ tool.meltzonelength } F{ tool.retract_speed * 60 }
        #SET_PRESSURE_ADVANCE_ORIG EXTRUDER={ tool.extruder } ADVANCE={ pressure_advance } # restore pressure advance
        RESTORE_GCODE_STATE NAME=toolchange_dropoff
    {% endif %}

    # raise Z to avoid collision
    G91
    G0 Z+5 F3000
    G90

    # move to park position
    {% if tool.zone[1] | float > 150 %}
        G0 X{ tool.zone[0] } Y150 F{ printer.toolhead.max_velocity * 60 }
    {% endif %}
    G0 X{ tool.zone[0] } Y{ tool.zone[1] } F{ printer.toolhead.max_velocity * 60 }
    G0 Y{ tool.park[1] | float - 20.0 } F{ printer.toolhead.max_velocity * 60 }
    G0 Y{ tool.park[1] } F3000
    M400

    # unlock tool
    TOOL_UNLOCK

    # switch to standy
    SET_TOOL_TEMPERATURE TOOL={ selected_tool_id } CHNG_STATE=1

    # move out
    G0 Y190 F{ printer.toolhead.max_velocity * 60 }
    M400

[gcode_macro _TOOLCHANGE_PICKUP]
description: Toolchange pickup macro
gcode:
    {% set selected_tool_id = params.T %}
    {% set tool = printer['tool ' ~ selected_tool_id] %}
    {% set extruder = printer[tool.extruder] %}
    {% set offsets = printer.save_variables.variables['tool_' ~ selected_tool_id ~ '_offsets'] | default(tool.offset) %}
    {% set remember_position = printer["gcode_macro _SETTINGS"].remember_position | int %}
    {% set apply_global_offsets = printer["gcode_macro _SETTINGS"].apply_global_offsets | int %}
    {% set temperature_compensation = printer["gcode_macro _SETTINGS"].temperature_compensation | abs %}
    {% set compensation_coefficients = printer["gcode_macro _SETTINGS"].compensation_coeffs %}
    {% set saved_z_pos = printer.toollock.saved_position[2] | default(0.0) | float %}
    {% set pressure_advance = extruder.pressure_advance %}

    # wait tool temperature if this tool different standby temperature
    {% if tool.heater_active_temp != tool.heater_standby_temp %}
        TEMPERATURE_WAIT_WITH_TOLERANCE TOOL={ selected_tool_id } TOLERANCE=10
    {% endif %}

    # reset offset
    SET_GCODE_OFFSET X=0 Y=0 Z=0

    # raise Z to avoid collision
    # exprimental: we only raise Z if the z position is high enough. (at least tool offset + 3mm to the saved z offset)
    # during dropoff, we will always raise z 5mm, so in most cases we will already be high enough.
    {% set target_z_pos = saved_z_pos + ( offsets[2] | float ) + 3.0 %}
    {% if printer.toolhead.position.z < target_z_pos %}
        G0 Z{ target_z_pos } F3000
    {% endif %}

    # ensure coupler is unlocked
    COUPLER_UNLOCK

    # move to pickup position
    {% if tool.zone[1] | float > 150 %}
        G0 X{ tool.zone[0] } Y170 F{ printer.toolhead.max_velocity * 60 }
    {% endif %}
    G0 X{ tool.zone[0] } Y{ tool.zone[1] } F{ printer.toolhead.max_velocity * 60 }
    G0 Y{ tool.park[1] | float - 20.0 } F{ printer.toolhead.max_velocity * 60 }
    G0 Y{ tool.park[1] } F3000
    M400

    # tool tool
    TOOL_LOCK

    # prime filament
    {% if extruder.can_extrude %}
        SAVE_GCODE_STATE NAME=toolchange_pickup
        M83
        #SET_PRESSURE_ADVANCE_ORIG EXTRUDER={ tool.extruder } ADVANCE=0 # disable pressure advance
        G1 E{ tool.meltzonelength } F{ tool.retract_speed * 60 }
        #SET_PRESSURE_ADVANCE_ORIG EXTRUDER={ tool.extruder } ADVANCE={ pressure_advance } # restore pressure advance
        RESTORE_GCODE_STATE NAME=toolchange_pickup
    {% endif %}

    # move out
    G0 Y170 F{ printer.toolhead.max_velocity * 60 }
    M400 # this is a must, otherwise the offset will not be consistent

    # set offsets
    {% set x_offset = offsets[0] %}
    {% set y_offset = offsets[1] %}
    {% set z_offset = offsets[2] %}
    {% if apply_global_offsets | abs > 0 %}
        {% set x_offset = x_offset + printer.toollock.global_offset[0] %}
        {% set y_offset = y_offset + printer.toollock.global_offset[1] %}
        {% set z_offset = z_offset + printer.toollock.global_offset[2] %}
    {% endif %}
    # temperature compensation: 0.0007 mm / °C, starting from 25°C (probing temperature)
    {% if temperature_compensation > 0 and tool.heater_active_temp | int > 25 %}
        {% set coefficient_l = compensation_coefficients[selected_tool_id].low | float %}
        {% set coefficient_h = compensation_coefficients[selected_tool_id].high | float %}
        {% if tool.heater_active_temp | int > 240 %}
            {% set coefficient = (coefficient_h - coefficient_l) * ((tool.heater_active_temp | int - 240) | float / 60.0) + coefficient_l %}
        {% else %}
            {% set coefficient = coefficient_l %}
        {% endif %}
        {% set offset_by_temp = ((tool.heater_active_temp | int - 25) | float) * coefficient %}
        RESPOND PREFIX="" MSG="Z Offset temperature compensation: { '%.6f'|format(offset_by_temp) } mm"
        {% set z_offset = z_offset + offset_by_temp %}
    {% endif %}
    SET_GCODE_OFFSET X={ x_offset } Y={ y_offset } Z={ z_offset }

    # restore position if it's enabled and we have a valid position
    {% if remember_position and saved_z_pos > 0 %}
        RESTORE_POSITION
    {% endif %}
